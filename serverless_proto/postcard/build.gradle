repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
    }
}

ext{
    junitPlatformVersion = '1.1.1'
    junitJupiterVersion  = '5.1.1'
    awsLambdaJavaCoreVersion = '1.1.0'
    awsLambdaJavaLog4jVersion = '1.0.0'
    awsJavaSdkBomVersion = '1.11.228'
    jacksonVersion = '2.8.5'
    lobVersion = '7.0.0'
    stripeVersion = '5.22.1'
    guaveVersion = '23.5-jre'
    findBugsVersion = '3.0.0'
    mockitoVersion = '2.+'
    guiceVersion = "4.0"
}

apply plugin: 'java'
apply plugin: "io.spring.dependency-management"
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: "jacoco"

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencyManagement {
    imports {
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.228'
    }
}

dependencies {
    compile (
        "com.amazonaws:aws-lambda-java-core:${awsLambdaJavaCoreVersion}",
        "com.amazonaws:aws-lambda-java-log4j:${awsLambdaJavaLog4jVersion}",
        "com.amazonaws:aws-java-sdk-bom:${awsJavaSdkBomVersion}",
        "com.amazonaws:aws-java-sdk-s3",
        "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
        "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
        "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}",
        "com.lob:lob-java:${lobVersion}",
        "com.stripe:stripe-java:${stripeVersion}",
        "com.google.guava:guava:${guaveVersion}",
        "com.google.code.findbugs:annotations:${findBugsVersion}",
        "org.mockito:mockito-core:${mockitoVersion}",
        "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}",
        "com.google.inject:guice:${guiceVersion}"
    )
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
}


jacoco {
    toolVersion = "0.8.1"
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }

    jacoco {
        excludes = ["**/junitextensions/**"]
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["**/junitextensions/**"])
        })
    }
}

checkstyle {
    toolVersion '8.8'
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

tasks.withType(Checkstyle) {
    exclude '**/com/junitextensions/MockitoExtension.java'
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/xsl/checkstyle-simple.xsl')
    }
}

findbugs {
    ignoreFailures = false
    toolVersion = "3.0.1"
    sourceSets=[sourceSets.main]
//    excludeFilter = file("config/findbugs/excludeFilter.xml")
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

// Task for building the zip file for upload
task buildZip(type: Zip) {
    // Using the Zip API from gradle to build a zip file of all the dependencies
    //
    // The path to this zip file can be set in the serverless.yml file for the
    // package/artifact setting for deployment to the S3 bucket
    //
    // Link: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Zip.html

    // set the base name of the zip file
    baseName = "hello"
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtime
    }
}

build.dependsOn buildZip

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}
