apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
    }
}

apply plugin: "io.spring.dependency-management"

dependencyManagement {
    imports {
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.228'
    }
}

dependencies {
    compile (
        'com.amazonaws:aws-lambda-java-core:1.1.0',
        'com.amazonaws:aws-lambda-java-log4j:1.0.0',
        'com.amazonaws:aws-java-sdk-bom:1.11.228',
        'com.amazonaws:aws-java-sdk-s3',
        'com.fasterxml.jackson.core:jackson-core:2.8.5',
        'com.fasterxml.jackson.core:jackson-databind:2.8.5',
        'com.fasterxml.jackson.core:jackson-annotations:2.8.5',
        'com.lob:lob-java:7.0.0',
        'com.stripe:stripe-java:5.22.1',
        'com.google.guava:guava:23.5-jre'
    )
    compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.0'
//    testCompile 'junit:junit:4.12'
}

apply plugin: 'checkstyle'
checkstyle {
    toolVersion '8.8'
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/xsl/checkstyle-simple.xsl')
    }
}

apply plugin: 'findbugs'
findbugs {
    ignoreFailures = false
    toolVersion = "3.0.1"
    sourceSets=[sourceSets.main]
//    excludeFilter = file("config/findbugs/excludeFilter.xml")
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

// Task for building the zip file for upload
task buildZip(type: Zip) {
    // Using the Zip API from gradle to build a zip file of all the dependencies
    //
    // The path to this zip file can be set in the serverless.yml file for the
    // package/artifact setting for deployment to the S3 bucket
    //
    // Link: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Zip.html

    // set the base name of the zip file
    baseName = "hello"
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtime
    }
}

build.dependsOn buildZip

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}
